@item 0        @tab 0x1000 - 1   @tab BIOS and real mode interrupts 
@item 0x07BE   @tab 0x07FF       @tab Partition table passed to another boot loader 
@item ?        @tab 0x2000 - 1   @tab Real mode stack 
@item 0x7C00   @tab 0x7D00 - 1   @tab Boot sector 
@item 0x8000   @tab ?            @tab GRUB kernel 
@item 0x68000  @tab 0x71000 - 1  @tab Disk buffer 
@item ?        @tab 0x80000 - 1  @tab Protected mode stack 
@item ?        @tab 0xA0000 - 1  @tab Extended BIOS Data Area 
@item 0xA0000  @tab 0xC0000 - 1  @tab Video RAM 
@item 0xC0000  @tab 0x100000 - 1 @tab BIOS 
@item 0x100000 @tab ?            @tab Heap and module code 

http://lukeluo.blogspot.com/2013/07/grub-how-to-7-debugging.html
https://stackoverflow.com/questions/32955887/how-to-disassemble-16-bit-x86-boot-sector-code-in-gdb-with-x-i-pc-it-gets-tr
https://stackoverflow.com/questions/43872078/debug-grub2-efi-image-running-on-qemu
http://www.rodsbooks.com/efi-bootloaders/controlling-sb.html

./configure --prefix=/root/grub HOST_CFLAGS='-g'
./configure --prefix=/root/grub-efi --with-platform=efi HOST_CFLAGS='-g'

0x823b

gcc -std=gnu99 -Os -m32 -Wall -W -Wshadow -Wpointer-arith -Wundef -Wchar-subscripts -Wcomment -Wdeprecated-declarations -Wdisabled-optimization -Wdiv-by-zero -Wfloat-equal -Wformat-extra-args -Wformat-security -Wformat-y2k -Wimplicit -Wimplicit-function-declaration -Wimplicit-int -Wmain -Wmissing-braces -Wmissing-format-attribute -Wmultichar -Wparentheses -Wreturn-type -Wsequence-point -Wshadow -Wsign-compare -Wswitch -Wtrigraphs -Wunknown-pragmas -Wunused -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value  -Wunused-variable -Wwrite-strings -Wnested-externs -Wstrict-prototypes -g -Wredundant-decls -Wmissing-prototypes -Wmissing-declarations  -Wextra -Wattributes -Wendif-labels -Winit-self -Wint-to-pointer-cast -Winvalid-pch -Wmissing-field-initializers -Wnonnull -Woverflow -Wvla -Wpointer-to-int-cast -Wstrict-aliasing -Wvariadic-macros -Wvolatile-register-var -Wpointer-sign -Wmissing-include-dirs -Wmissing-prototypes -Wmissing-declarations -Wformat=2 -march=i386 -mrtd -mregparm=3 -falign-jumps=1 -falign-loops=1 -falign-functions=1 -freg-struct-return -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -msoft-float -fno-dwarf2-cfi-asm -mno-stack-arg-probe -fno-asynchronous-unwind-tables -fno-unwind-tables -fno-ident -fno-PIE -fno-pie -fno-stack-protector -Wtrampolines -Werror   -fno-builtin   -m32 -Wl,-melf_i386 -no-pie -Wl,--build-id=none  -nostdlib -Wl,-N -Wl,-S -Wl,-N -Wl,-Ttext,0x7C00   -o boot_hybrid.image boot/i386/pc/hybrid_image-boot.o

gcc -DHAVE_CONFIG_H -I.  -Wall -W -DGRUB_UTIL=1 -D_FILE_OFFSET_BITS=64 -I./include -DGRUB_FILE=\"grub-core/kern/emu/argp_common.c\" -I. -I. -I. -I. -I./include -I./include -I./grub-core/lib/libgcrypt-grub/src/ -I./grub-core/lib/gnulib -I./grub-core/lib/gnulib  -D_FILE_OFFSET_BITS=64 -std=gnu99  -Wall -W -Wshadow -Wpointer-arith -Wundef -Wchar-subscripts -Wcomment -Wdeprecated-declarations -Wdisabled-optimization -Wdiv-by-zero -Wfloat-equal -Wformat-extra-args -Wformat-security -Wformat-y2k -Wimplicit -Wimplicit-function-declaration -Wimplicit-int -Wmain -Wmissing-braces -Wmissing-format-attribute -Wmultichar -Wparentheses -Wreturn-type -Wsequence-point -Wshadow -Wsign-compare -Wswitch -Wtrigraphs -Wunknown-pragmas -Wunused -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value  -Wunused-variable -Wwrite-strings -Wnested-externs -Wstrict-prototypes -Wcast-align  -Wextra -Wattributes -Wendif-labels -Winit-self -Wint-to-pointer-cast -Winvalid-pch -Wmissing-field-initializers -Wnonnull -Woverflow -Wvla -Wpointer-to-int-cast -Wstrict-aliasing -Wvariadic-macros -Wvolatile-register-var -Wpointer-sign -Wmissing-include-dirs -Wmissing-prototypes -Wmissing-declarations -Wformat=2 -Werror -Wno-undef -Wno-sign-compare -Wno-unused -Wno-unused-parameter -Wno-redundant-decls -Wno-unreachable-code -Wno-conversion   -MT grub-core/kern/emu/grub_mknetdir-argp_common.o -MD -MP -MF grub-core/kern/emu/.deps-util/grub_mknetdir-argp_common.Tpo -c -o grub-core/kern/emu/grub_mknetdir-argp_common.o `test -f 'grub-core/kern/emu/argp_common.c' || echo './'`grub-core/kern/emu/argp_common.c



dd if=/dev/sda of=/tmp/mbrsda.bak bs=512 count=1
dd if=/tmp/mbrsda.bak of=/dev/sdb bs=446 count=1
objdump -D -b binary -mi386 -Maddr16,data16 /usr/mdec/mbr

grub2-install --boot-directory=/mnt/boot --modules="part_msdos" disk.img

grub-mkimage --directory '/root/grub/lib/grub/i386-pc' --prefix '/boot/grub' --output '/mnt/boot/grub/i386-pc/core.img'  --dtb '' --sbat '' --format 'i386-pc' --compression 'auto'   --config '/mnt/boot/grub/i386-pc/load.cfg' 'part_msdos' 'ext2' 'part_msdos' 'biosdisk' 'search_fs_uuid'

Notes on using Grub2 for BIOS-based platforms
=============================================

1. Create a disk image
   dd if=/dev/zero of=disk.img bs=1M count=32
2. Partition it (either legacy or GPT style partitions work)
   cfdisk disk.img
    - Create one partition, type Linux, for the root
      filesystem. The only constraint is to make sure there
      is enough free space *before* the first partition to
      store Grub2. Leaving 1 MB of free space is safe.
3. Setup loop device and loop partitions
   sudo losetup -f disk.img
   sudo partx -a /dev/loop0
4. Prepare the root partition
   sudo mkfs.ext3 -L root /dev/loop0p1
   sudo mount /dev/loop0p1 /mnt
   sudo tar -C /mnt -xf output/images/rootfs.tar
   sudo umount /mnt
5. Install Grub2
   sudo ./output/host/sbin/grub-bios-setup \
        -b ./output/host/lib/grub/i386-pc/boot.img \
        -c ./output/images/grub.img -d . /dev/loop0
6. Cleanup loop device
   sudo partx -d /dev/loop0
   sudo losetup -d /dev/loop0
7. Your disk.img is ready!

Using genimage
--------------

If you use genimage to generate your complete image,
installing Grub can be tricky. Here is how to achieve Grub's
installation with genimage:

partition boot {
    in-partition-table = "no"
    image = "path_to_boot.img"
    offset = 0
    size = 512
}
partition grub {
    in-partition-table = "no"
    image = "path_to_grub.img"
    offset = 512
}

The result is not byte to byte identical to what
grub-bios-setup does but it works anyway.

To test your BIOS image in Qemu
-------------------------------

qemu-system-{i386,x86-64} -hda disk.img

Notes on using Grub2 for x86/x86_64 EFI-based platforms
=======================================================
1. Create a disk image
   dd if=/dev/zero of=disk.img bs=1M count=32
2. Partition it with GPT partitions
   cgdisk disk.img
    - Create a first partition, type EF00, for the
      bootloader and kernel image
    - Create a second partition, type 8300, for the root
      filesystem.
3. Setup loop device and loop partitions
   sudo losetup -f disk.img
   sudo partx -a /dev/loop0
4. Prepare the boot partition
   sudo mkfs.vfat -n boot /dev/loop0p1
   sudo mount /dev/loop0p1 /mnt
   sudo cp -a output/images/efi-part/* /mnt/
   sudo cp output/images/bzImage /mnt/
   sudo umount /mnt
5. Prepare the root partition
   sudo mkfs.ext3 -L root /dev/loop0p2
   sudo mount /dev/loop0p2 /mnt
   sudo tar -C /mnt -xf output/images/rootfs.tar
   sudo umount /mnt
6  Cleanup loop device
   sudo partx -d /dev/loop0
   sudo losetup -d /dev/loop0
7. Your disk.img is ready!

To test your i386/x86-64 EFI image in Qemu
------------------------------------------

1. Download the EFI BIOS for Qemu
   Version IA32 or X64 depending on the chosen Grub2
   platform (i386-efi vs. x86-64-efi)
   https://www.kraxel.org/repos/jenkins/edk2/
   (or use one provided by your distribution as OVMF)
2. Extract, and rename OVMF.fd to bios.bin and
   CirrusLogic5446.rom to vgabios-cirrus.bin.
3. qemu-system-{i386,x86-64} -L ovmf-dir/ -hda disk.img
4. Make sure to pass pci=nocrs to the kernel command line,
   to workaround a bug in the EFI BIOS regarding the
   EFI framebuffer.

Notes on using Grub2 for ARM u-boot-based platforms
===================================================

The following steps show how to use the Grub2 arm-uboot platform
support in the simplest way possible and with a single
buildroot-generated filesystem.

 1. Load qemu_arm_vexpress_defconfig

 2. Enable u-boot with the vexpress_ca9x4 board name and with
    u-boot.elf image format.

 3. Enable grub2 for the arm-uboot platform.

 4. Enable "Install kernel image to /boot in target" in the kernel
    menu to populate a /boot directory with zImage in it.

 5. The upstream u-boot vexpress_ca9x4 doesn't have CONFIG_API enabled
    by default, which is required.

    Before building, patch u-boot (for example, make u-boot-extract to
    edit the source before building) file
    include/configs/vexpress_common.h to define:

    #define CONFIG_API
    #define CONFIG_SYS_MMC_MAX_DEVICE   1

 6. Create a custom grub2 config file with the following contents and
    set its path in BR2_TARGET_GRUB2_CFG:

    set default="0"
    set timeout="5"

    menuentry "Buildroot" {
        set root='(hd0)'
        linux /boot/zImage root=/dev/mmcblk0 console=ttyAMA0
        devicetree /boot/vexpress-v2p-ca9.dtb
    }

 7. Create a custom builtin config file with the following contents
    and set its path in BR2_TARGET_GRUB2_BUILTIN_CONFIG:

    set root=(hd0)
    set prefix=/boot/grub

 8. Create a custom post-build script which copies files from
    ${BINARIES_DIR}/boot-part to $(TARGET_DIR)/boot (set its path in
    BR2_ROOTFS_POST_BUILD_SCRIPT):

    #!/bin/sh
    cp -r ${BINARIES_DIR}/boot-part/* ${TARGET_DIR}/boot/

 9. make

10. Run qemu with:

    qemu-system-arm -M vexpress-a9 -kernel output/images/u-boot -m 1024 \
    -nographic -sd output/images/rootfs.ext2

11. In u-boot, stop at the prompt and run grub2 with:

  => ext2load mmc 0:0 ${loadaddr} /boot/grub/grub.img
  => bootm

12. This should bring the grub2 menu, upon which selecting the "Buildroot"
    entry should boot Linux.


Notes on using Grub2 for Aarch64 EFI-based platforms
====================================================

The following steps show how to use the Grub2 arm64-efi platform,
using qemu and EFI firmware built for qemu.

 1. Load aarch64_efi_defconfig

 2. make

 3. Download the EFI firmware for qemu aarch64
    https://www.kraxel.org/repos/jenkins/edk2/
    (or use one provided by your distribution as OVMF-aarch64 or AAVMF)

 4. Run qemu with:

    qemu-system-aarch64 -M virt -cpu cortex-a57 -m 512 -nographic \
    -bios <path/to/EDK2>/QEMU_EFI.fd -hda output/images/disk.img \
    -netdev user,id=eth0 -device virtio-net-device,netdev=eth0

 5. This should bring the grub2 menu, upon which selecting the
    "Buildroot" entry should boot Linux.


915resolution - This module is used to change the video resolution.

acpi - Advanced Configuration and Power Interface (ACPI) is used to perform various power-related functions.

adler32 - This is a cryptography module that contains the tools needed to use the Adler-32 checksum.

affs - Support for the AFFS filesystem is provided by this module.

afs - Support for the AFS filesystem is provided by this module.

ahci - AHCI stands for "Advanced Host Controller Interface" and this is a special hard-drive format (like IDE or SATA). This module offers the needed code for GRUB to recognize such devices.

all_video - Additional video and graphics support can be gained when the "all_video" module is loaded.

ata - This module provides support for ATA computer buses.

at_keyboard - This module is used to support the 84-key keyboards.

backtrace - This module gets the list of functions that are running in an active thread.

bfs - This module provides support for the Be FileSystem which is used by BeOS.

biosdisk - This module provides GRUB with the ability to boot off of LiveDisks.

blocklist - This module displays the list of blocks used by the specified file.

bsd - This module provides support for loading BSD kernels.

btrfs - This module provides support for the B-tree Filesystem.

bufio - This module supports buffer reads and writes.

cat - The "cat" command is provided by this module.

cbfs - This module provides GRUB with support for the Callback Filesystem (CBFS).

cbls - This module lists the coreboot tables.

cbmemc - This module displays the contents of the CBMEM console.

cbtable - This module provides support for Coreboot tables.

chain - This module offers chainloading capabilities.

cmosdump - This command displays the raw CMOS data.

cmp - The "cmp" command is provided by this module.

configfile - This module provides the ability to read and manipulate configuration files.

cpio_be - This module provides support for big-endian CPIO.

cpio - This module provides support for CPIO.

cpuid - This modules tests for various CPU features.

crc64 - This module offers an error-detection tool known as Cyclic Redundancy Check (CRC).

cryptodisk - This module is needed to mount a crypto disk.

date - This module provides the "date" command.

datetime - This module provides the "datetime" command.

diskfilter - This module is needed to read RAID arrays.

disk - This module is needed to read hard-drives.

drivemap - This module contains functions related to BIOS drive mappings.

echo - This module provides the "echo" command.

efiemu - This module provides EFI emulation features.

ehci - This module provides support for the Enhanced Host Controller Interface (EHCI) which is used by USBv2.

elf - This module loads ELF files.

eval - This module provides the "eval" command which is used to evaluate expressions.

exfat - GRUB can gain support for FAT64 (also called exFAT) with this module.

ext2 - This module provides support for EXT2 filesystems.

fat - GRUB can gain support for the FAT filesystem with this module.

file - This module provides the basic file I/O functions.

font - This module provides many font-related functions.

freedos - This module contains the code needed to boot FreeDOS.

fshelp - This module contains functions related to filesystem-helpers.

gcry_arcfour - This module provides support for the ARC4 cryptography tool.

NOTE: "gcry_*" modules are GRUB Cryptography tools.

gcry_blowfish - This module provides support for the Blowfish cryptography tool.

gcry_camellia - This module provides support for the Camellia cryptography tool.

gcry_cast5 - This module provides support for the CAST-128 (also called CAST5) cryptography tool.

gcry_crc - This module provides support for the hash functions needed by Cyclic Redundancy Check utility.

gcry_des - This module provides support for the Data Encryption Standard (DES) algorithm.

gcry_dsa - This module provides support for the Digital Signature Algorithm (DSA) cryptography tool.

gcry_idea - This module provides support for the International Data Encryption Algorithm (IDEA) cryptography tool.

gcry_md4 - This module provides support for the MD4 checksum utility.

gcry_md5 - This module provides support for the MD5 checksum utility.

gcry_rfc2268 - This module provides support for the RFC2268 cryptography tool.

gcry_rijndael - This module provides support for the Rijndael encryption algorithm cryptography tool (which is similar to DES).

gcry_rsa - This module provides support for the RSA cryptography tool.

gcry_seed - This module provides support for the SEED (block cypher) cryptography tool.

gcry_serpent - This module provides support for the Serpent (a symmetric key block cipher) cryptography tool.

gcry_sha1 - This module provides support for the SHA1 checksum utility.

gcry_sha256 - This module provides support for the SHA256 checksum utility.

gcry_sha512 - This module provides support for the SHA512 checksum utility.

gcry_tiger - This module provides support for the Tiger (hash function) cryptography tool.

gcry_twofish - This module provides support for the Twofish (a symmetric key block cipher) cryptography tool.

gcry_whirlpool - This module provides support for the Whirlpool (hash function) cryptography tool.

gdb - This module contains features related to the GNU Debugger (GDB).

geli - This module provides a block device-layer disk encryption system for FreeBSD.

gettext - This module provides language translation abilities.

gfxmenu - This module provides the gfxmenu.

gptsync - A GPT partition table can be synced with an MBR partition table using this module.

gzio - This module offers Gzip I/O abilities.

halt - This module provides the "halt" command.

hashsum - This module provides the features needed to compute and check hash checksums.

hdparm - GRUB can use this module to set and get ATA parameters.

hello - This module is an "Hello World" example for making GRUB modules.

help - This module provides the help utility.

hexdump - This module offers hex dump capabilities.

hfs - GRUB uses this module to gain support for the HFS filesystem.

hfspluscomp - HFS+ compression is supported with this module.

hfsplus - GRUB uses this module to gain support for the HFS+ filesystem.

http - GRUB can boot systems that reside on a Network Filesystem (NFS). This means that GRUB may need some networking capabilities sometimes. The "http" module provides the Hyper Text Transfer Protocol.

hwmatch - Blacklists and whitelists for hardware are used with this module.

iorw - This module is used to read and write the input and output of devices..

iso9660 - This module offers iso9660 support which is needed to read optical discs that use this filesystem.

jfs - GRUB uses this module to gain support for the JFS filesystem.

jpeg - GRUB can have background images (like a wallpaper). The "jpeg" module provides support for JPEG images, which GRUB can use as a background image.

keylayouts - The keyboard layout can be changed using this module.

keystatus - By using the keystatus module, GRUB can detect whether or not key modifiers are active (such as caps-lock, shift, ctrl, etc.).

ldm - The LDM module offers support for the LDM partitioning layout (Microsoft's Logical Disk Manager).

legacycfg - Backwards compatibility for various GRUB Legacy features are provided with this module.

legacy_password_test - This module is used to test the legacy password system.

linux16 - The "linux16" command is in this module. The command is used to load a 16-bit Linux system.

linux - This module is just like the "linux16" module except that this is the standard "linux" command.

loadenv - This module provides the "loadenv" command which is used to load variables from the environment block file.

loopback - The "loopback" command comes from the "loopback" module. "loopback" provides the tools needed to create loopback devices.

lsacpi - This module is used to list the detected ACPI devices.

lsapm - This module lists Advanced Power Management (APM) devices. APM is the predessor to ACPI.

lsmmap - This module displays the memory map (LiSt Memory Map).

ls - This module provides GRUB with the "ls" command which is used to list devices or files.

lspci - This module provides the "lspci" command which is used to list PCI devices.

luks - Linux Unified Key Setup (LUKS) is a special disk-encryption format used by Linux systems. With this driver, GRUB can access LUKS partitions with this module.

lvm - This module offers GRUB support for Linux's Logical Volume Manager (LVM).

lzopio - This module provides support for reading and writing (I/O) files that are compressed with lzop. "lzop" is similar to Gzip and uses the LZO compression library.

macbless - With this module, GRUB can "bless" a file or directory that resides on an HFS or HFS+ filesystem. To "bless" a file means to make it bootable and set various options related to startup.

macho - Mach-O files cannot be loaded without using this module. A Mach-O file is a Mach Object file format that has replaced the "a.out" file format.

mda_text - This driver provides text support for MDA (Monochrome Display Adapter) as opposed to VGA.

mdraid09_be - RAID support with big-endian is given to GRUB via this module.

mdraid09 - RAID support is given to GRUB via this module.

mdraid1x - RAID1 support is offered with this module.

memdisk - This module provides GRUB a way to boot old operating systems (like from floppy drives). http://www.syslinux.org/wiki/index.php/MEMDISK

memrw - GRUB uses this module to read and write to physical memory.

minicmd - The commands that are available in rescue mode come from this module.

minix2_be - Support for MinixFS v2 with big-endian is provided by this module.

minix2 - Support for MinixFS v2 without big-endian is provided by this module.

minix3_be - Support for MinixFS v3 with big-endian is provided by this module.

minix3 - Support for MinixFS v3 without big-endian is provided by this module.

minix_be - Support for MinixFS v1 with big-endian is provided by this module.

minix - General support for Minix filesystems is offered by this module.

mmap - This module provides the needed code for memory mapping.

morse - GRUB can provide information via Morse Code when this module is loaded.

mpi - GRUB can support the Message Passing Interface (MPI) which is commonly seen on clusters.

msdospart - Support for MS-DOS partitions (commonly called "MBR partitions") is provided by this module.

multiboot2 - This module provides various functions needed to support multi-booting systems (just like the "multiboot" system). However, this module provides additional and newer features.

multiboot - This module provides various functions needed to support multi-booting systems.

named-colors - This module is a library that contains various color names with the RGB values for that color.

nativedisk - This module makes GRUB use native disk drivers such as pata, ahci, usbms, ohci, uhci, and ehci.

net - Many network drivers and functions are contained in this module. GRUB is able to boot from remote hard-drives via the network.

newc - NewC is a special CPIO format. This module provides a way for GRUB to access such CPIO files.

nilfs2 - This module provides support for NILFS2 (New Implementation of Log filesystem v2).

normal - This module provides "Normal Mode" which is the opposite of "Rescue Mode".

ntfscomp - GRUB is able to support the compression commonly used in NTFS with this module.

ntfs - GRUB uses this module to gain support for the NTFS filesystem.

ntldr - This module is based on the "chainloader" module and is used to boot a Windows partition. This module does not read the Volume Boot Record. This is helpful in cases when the Volume Boot Record is corrupted.

odc - This module provides support for a special CPIO format known as "Octet-oriented cpio format".

ohci - Open Host Controller Interface (OHCI) is a hardware standard commonly used by FireWire devices.

part_acorn - This module provides support for Acorn partitions and partitioning tables.

part_amiga - This module provides support for Amiga partitions and partitioning tables.

part_apple - This module provides support for Apple partitions and partitioning tables.

part_bsd - This module provides support for BSD partitions and partitioning tables.

part_dfly - This module provides support for DFLY partitions and partitioning tables.

part_dvh - This module provides support for DVH partitions and partitioning tables.

part_gpt - This module provides support for GPT (GUID Partition Table) partitions and partitioning tables.

part_msdos - This module provides support for MS-DOS (MBR) partitions and partitioning tables.

part_plan - This module provides support for Plan9 partitions and partitioning tables.

part_sun - This module provides support for Sun partitions and partitioning tables.

part_sunpc - This module provides support for SunPC partitions and partitioning tables.

parttool - This module provides the "parttool" command.

password - This module provides the "password" command.

pata - Support for the Parallel ATA (PATA) disk interface is provided by this module.

pbkdf2 - This module provides the PBKDF2 (Password-Based Key Derivation Function 2) cryptography tool.

pcidump - This module provides information on the detected PCI devices.

pci - This module provides support for Peripheral Component Interconnect (PCI) computer buses.

plan9 - This module is needed by GRUB to load Plan9 kernels.

play - This module provides the "play" command which is used to play sound via the BIOS speaker.

png - PNG files can be used as the background image when this module is loaded.

probe - This module is used to probe for device information.

procfs - This module provides support for ProcFS.

progress - This module provides a progress bar.

pxechain - This module supports PXE chainloading.

pxe - GRUB uses this module to gain support for Preboot eXecution Environment (PXE). This is used to boot an operating system independently of local storage units.

raid5rec - This module provides RAID5 support.

raid6rec - This module provides RAID6 support.

read - This module provides the "read" command.

reboot - This module provides the "reboot" command.

regexp - Regular Expressions (REGEX wildcards) are supported via this module.

reiserfs - This module provides support for the Reiser Filesystem.

romfs - This module provides RomFS support.

scsi - This module provides support for the SCSI (Small Computer System Interface) hardware protocols and standards.

sendkey - This module provides the "sendkey" command which is used to send emulated key-presses to GRUB.

serial - This module provides support for serial devices.

setjmp - This module is a library that provides support for non-local jumps. This is needed to manage errors and interrupts.

setpci - This module is used to configure PCI devices.

sfs - Support for the Smart Filesystem (SFS) is offered by this module. SFS is a journaling filesystem used by Amiga systems.

sleep - The "sleep" command is provided by this module. The "sleep" command is just like the one in BASH; execution will wait/pause for the specified time.

sleep_test - This module is used to test for proper "sleep" support.

spkmodem - This module is a generic speaker driver for GRUB. Enabling this feature can slow down the booting process.

spkmodem-recv - This module decodes spkmodem signals.

squash4 - GRUB can access Squash Filesystem with this module. SquashFS is a read-only filesystem that is compressed.

syslinuxcfg - GRUB can support SysLinux configuration files with this module.

tar - Support for Tar files is offered with this module.

terminal - This module provides support for terminals.

terminfo - GRUB can read terminfo entries via this module.

testload - GRUB can load a file multiple ways to test for errors.

test - This module provides the "test" command which is used to evaluate an expression.

testspeed - GRUB's fle reading speed can be measured with this module.

tftp - Trivial File Transfer Protocol (TFTP) provides GRUB a way to get files needed for booting from another system. This also provides a way to support diskless booting.

tga - This module offers support for the Tandy Graphics Adapter (TGA) which is a technology similar to VGA.

time - This module provides the "time" command which prints the current time.

trig - This module provides trigonometric functions to GRUB.

tr - The "tr" command is provided by this module. This is the same "tr" command as seen in BASH and other shells.

truecrypt - Truecrypted MBR partitions require that this module be loaded so that GRUB can boot such partitions. TrueCrypt is an on-the-fly-encryption (OTFE) utility for files or partitions.

true - This module provides the boolean commands "true" and "false".

udf - The "udf" module provides support for the Universal Disk Format (UDF).

ufs1_be - Support for the Unix Filesystem v1 with big-endian is provided with this module.

ufs1 - Support for the Unix Filesystem v1 is provided with this module.

ufs2 - Support for the Unix Filesystem v2 is provided with this module.

uhci - This module provides support for the Universal Host Controller Interface (UHCI).

usb_keyboard - USB keyboards are supported with this module.

usb - USB devices in general are supported with the "usb" module.

usbms - USB mice are supported by this module that offers features needed for USB data streams.

usbtest - USB support is tested with this module.

vbe - VESA BIOS Extensions (VBE) is a specific VESA standard that this module supports.

verify - File signatures can be verified using the "verify" module.

vga - This module provides VGA support.

vga_text - This module provides the text-only (VGA) mode.

video_bochs - This module provides the Bochs video driver.

video_cirrus - This module provides the Cirrus video driver.

video_colors - Many functions related to color come from this module.

video_fb - This module is for the video framebuffer.

videoinfo - Various information concerning the graphics can be displayed using the tools that are part of the "videoinfo" module.

video - This provides code needed for various video modes.

videotest - The video settings can be tested using this module.

xfs - GRUB uses this module to gain support for the XFS filesystem.

xnu - This module provides support for XNU kernels (like OS X).

xnu_uuid - This module converts the 64-bit UUIDs to the 128-bit UUIDs used by Xnu kernels.

xnu_uuid_test - This module is used to ensure that two 128-bit UUIDs match.

xzio - This module provides read and write support for xz-compressed files.

zfscrypt - Encryption tools for the ZFS filesystem are in this module.

zfsinfo - This module displays various information about a ZFS filesystem/partition.

zfs - GRUB uses this module to gain support for the ZFS filesystem.

Many other modules exist, but these are some of the most common ones.